#!/bin/bash
#-----------------------------------------------------------------------#
#                                                                       #
# These functions have been created by Rob Ladendorf (rioted@gmail.com) #
#                                                                       #
#-----------------------------------------------------------------------#

function glxcat()
{
  old=$IFS
  IFS=:
  printf "%s\n" $1
  IFS=$old
}

function math() # BETTER MATH FUNCTION (LONG DECIMAL ANSWERS)
{
	bc -l<<<"$@"
}

function maths() # MATH W/O LONG DECIMALS
{
	bc -l <<< "$@" | zz
}

function nix() # REMOVES ALL DECIMAL PLACES WHEN PIPING FROM MATH
{
	sed 's/.[[:digit:]]*$//g'
}

function zz() # LEAVES ONLY 3 DECIMAL PLACES WHEN PIPING FROM MATH
{
  sed 's/.................$//g'
}

function fileout() # COPY A FILE WITH THE DATE IN THE TITLE IN WD
{
	local TIME=`date +%m-%d`
	cat "$@">>"$@-$TIME"
}

function nbash() # --description 'Open a new tab in Bash. (XDT)'
{
	xdotool key ctrl+shift+t
  xdotool keyup ctrl+shift+t
  xdotool type bash
  xdotool keydown Return
  xdotool keyup Return
  xdotool type clear
  xdotool key Return
  xdotool keyup Return
}

function lsop() # USEFUL FOR SEARCHING FOR ALL BINARIES
{
	ls /bin /sbin /usr/bin /usr/sbin /usr/local/bin
}

function colors() # DISPLAYS A LIST OF HOW TO SHOW COLORS IN BASH
{
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}
function disk_color() # CURRENT DIRECTORY SHOULD CHANGE COLOR BASED ON AMOUNT OF FILES IN IT
{
    if [ ! -w "${PWD}" ] ; then
        echo -e "${Red}No 'write' privilege in the current directory."$NC
    elif [ -s "${PWD}" ] ; then
        local used=$(command \df -P "$PWD" | awk 'END {print $5} {sub(/%/,"")}')
        if [ ${used} -gt 50 ]; then
            echo -e "${ALERT}Disk almost full (>95%)."$NC
        elif [ ${used} -gt 40 ]; then
            echo -e "${BRed}Free disk space almost gone."$NC
        else
            echo -e "${Green}Free disk space is ok."$NC
        fi
    else
        echo -e "${Cyan} Current directory is size '0' (like /proc, /sys etc)."$NC
    fi
}
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'


function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; } # GET PROCESSES THE USER STARTED
function pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; } # PICK A PROCESS FROM MY_PS



function ask()	# SEE 'KILLPS' FOR EXAMPLE OF USE.
{
    echo -n "$@" '[y/n] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}



function killps() #  KILL BY PROCESS NAME
{
    local pid pname sig="-TERM"   # DEFAULT SIGNAL
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: killps [-SIGNAL] pattern"
        return;
    fi
    if [ $# = 2 ]; then sig=$1 ; fi
    for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} )
    do
        pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
        if ask "Kill process $pid <$pname> with signal $sig?"
            then kill $sig $pid
        fi
    done
}

function ii()	# GET CURRENT HOST RELATED INFO.
{
  timeup=$(uptime | awk '{ print $3 }' | sed 's/,//g')
	echo -e "\n${BRed}System info:$NC " ; echo -e $(uname -s)"@"$(uname -n) $(uname -m) $(uname -r)
  echo -e "\n${BRed}Current date:$NC " ; date
	echo -e "\n${BRed}System Uptime:$NC" ; echo -e $timeup
  echo -e "\n${BRed}Memory stats:$NC " ; echo -e "$(\free -m)"
  echo -e "\n${BRed}Diskspace:$NC\n" ; dfc | grep '/dev/' | grep -v tmp | sort
  echo -e "\n${BRed}Local IP Address:$NC\n" ; my_ip
  echo -e "\n"
  #echo -e "\n${BRed}Open Ports :$NC\n"; printf "%s\n" $(netstat -te)| grep -e fork -e localhost | rev | sed 's/:/ /g' | awk '{ print $1 }' | rev | sort -n
}

function my_ip()	# GET IP OF BOTH RUNNING WIFI DEVICES
{
	wlan0=$(ifconfig wlp2s0 2>/dev/null | awk '/wlp/{ print $1 }' )
	wlan1=$(ifconfig wlp0s29u1u3 2>/dev/null | awk '/wlp/{ print $1 }')
	wlanip0=$(ifconfig wlp2s0 2>/dev/null | awk '/inet/{ print $2 }' | grep 10 | grep -v inet6 )
	wlanip1=$(ifconfig wlp0s29u1u3 2>/dev/null | grep -v 'inet6' | awk '/inet/{ print $2 }' | grep 10 2>/dev/null)
	printf "%s\t\t " $wlan0 $wlanip0 ; echo -e "\n"
	printf "%s\t " $wlan1 $wlanip1
}

function man() # BETTER MAN FUNCTIONALITY
{
    for i ; do
        xtitle The $(basename $1|tr -d .[:digit:]) manual
        command man -a "$i"
    done
}

function mydf()         # PRETTY-PRINT OF 'DF' OUTPUT.
{                       # INSPIRED BY 'DFC' UTILITY.
    for fs ; do

        if [ ! -d $fs ]
        then
          echo -e $fs" :No such file or directory" ; continue
        fi

        local info=( $(command df -P $fs | awk 'END{ print $2,$3,$5 }') )
        local free=( $(command df -Pkh $fs | awk 'END{ print $4 }') )
        local nbstars=$(( 20 * ${info[1]} / ${info[0]} ))
        local out="["
        for ((j=0;j<20;j++)); do
            if [ ${j} -lt ${nbstars} ]; then
               out=$out"*"
            else
               out=$out"-"
            fi
        done
        out=${info[2]}" "$out"] ("$free" free on "$fs")"
        echo -e $out
    done
}

function xtitle() # I DUNNO WHAT THIS DOES
{
	case "$TERM" in
	*term* | rxvt)
			echo -en  "\e]0;$*\a" ;;
	*)  ;;
	esac
}

function dirc() # VIEW CURRENT DIRCOLORS SETTINGS IN EASY FORMAT
{
  old=$IFS
  IFS=:
  printf "%s\n" $(dircolors) | sort
  IFS=$old
}

function bak()	# CREATES A BACKUP FILE FROM STDIN
{
  for i do
    case ${i##*/} in
      (?*.?*) cp -iv -- "$i" "${i%.*}.bak.${i##*.}";;
      (*) cp -iv -- "$i" "$i.bak"
    esac
  done
}

function debak() # RIDS WD OF ALL .BAK FILES
{
	for file in *.bak ; do cp "$file" "${file//.bak}"; rm -iv *.bak; done
}

function bcuts() # LISTS COMMON TERMINAL SHORTCUTS
{
	cat /home/rob/Documents/PC-Info+Help/LinuxFiles/LinuxConfig/Shortcuts/cmdkeycuts
}
# MOVE TO A DIRECTORY AND RUN LS
function cdls() { cd "$@"; ls; }
# MOVE UP THE NUMBER OF DIRS IN THE NUMBER AFTER THE COMMAND (cd-up 3) WOULD TAKE YOU 3 DIRS UP
function cd-up() { cd $(printf "%0.0s../" $(seq 1 $1)); }

function packer()
{
	awk '{ $1=""; print $0 }' ~/.bash_aliases | grep 'PACKAGE' -A 17
}

function funcls()	# DISPLAY THE TITLES OF ALL FUNCTIONS IN THIS FILE
{
	grep '^function' ~/.bash_functions | sed 's/function //g' | sort
}

function path()	# MAKE PATH EASY TO READ
{
  old=$IFS
  IFS=:
  printf "%s\n" $PATH
  IFS=$old
}

function lsfa() # LIST ONLY HIDDEN FILES IN WD (NON-DIRS)
{
	ls -lA | grep ^- | gawk '{print $9}'
}

function lsf() # LIST ONLY NON-HIDDEN NON-DIRS IN WD
{
	ls -F | grep -v '/$'
}

function lsfd() # LIST ONLY DIRS IN WD
{
	ls -F | grep '/$'
}

function lsfad() # LIST ONLY HIDDEN DIRS IN WD
{
	ls -FA | grep '/$' | grep -v '^[[:alpha:]]'
}

function cmd() # MAKE EXECUTABLE SH SCRIPT
{
	touch $1.sh
	echo "#!/bin/bash" > $1.sh
	chmod +x $1.sh
}

function exx () # EXTRACT ALMOST ANY ARCHIVE FILE
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1 ;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function slx() # CHANGE BRIGHTNESS (SLX 1-9)
{
	xrandr --output HDMI-0 --brightness 0.$1
}

function mdcd() # MAKE A DIRECTORY AND MOVE TO IT, ALSO CREATING SUBDIRECTORIES ON THE WAY
{
	mkdir -p $1 && mkdir -p $1 && cd $1
}

function pkglist() # LIST CACHED PKGS FROM PACMAN
{
	clear ; cd /var/cache/pacman/pgk/ ; ls
	read -p "Enter your query for grep.   " thing ; echo -e " \n"
	ls | grep $thing > ~/pgklist ; cat ~/pgklist | more
	read -p "[Enter] to continue." ; echo -e " \n"
	rm -f ~/pgklist 1>/dev/null
}

function sp_ce() # REPLACE SPACES IN FILENAMES WITH _
{
	for f in *\ *; do mv "$f" "${f// /_}"; done
}

function sp-ce() # REPLACE SPACES IN FILENAMES WITH -
{
	for f in *\ *; do mv "$f" "${f// /-}"; done
}

function mx7z() # MAKE A HIGHLY-COMPRESSED TAR.7Z ARCHIVE
{
	tar cf - $1.tar $1 | 7za a -t7z -si -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on $1.tar.7z
}

function un7x() # EXTRACT A TAR.7Z ARCHIVE
{
	FILENAME=$1.tar;
	7za x $FILENAME.7z;
	tar -xvf $FILENAME ; rm -f $FILENAME
}

function targz() # CREATE A TAR.GZ ARCHIVE BASED ON ONE FILE/FOLDER FROM STDIN
{
	tar -cvzf $1.tar.gz $1
}

function targzview() # VIEW CONTENTS OF A TAR.GZ FILE
{
	gunzip $1.tar.gz
	tar -tvf $1.tar
	gzip $1.tar
}

function extargz() # EX TAR.GZ TO WD
{
	tar -xvzf $1.tar.gz
}

function tarview() # VIEW CONTENTS OF TAR FILE
{
	tar -tvf $1.tar
}

function targzadd() # ADD STDIN FILE TO TAR.GZ ARCHIVE
{
	gunzip $1.tar.gz
	tar -rvf $1.tar $2
	tar -tvf $1.tar
	gzip $1.tar
}

function gz() # GZIP A FILE
{
	gzip $1
}

# MAKE A TAR.GZ OR .ZIP ARCHIVE FROM A FOLDER STDIN
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

function linetotal() # GET TOTAL NUM OF LINES IN A FILE
{
	gawk '{ nlines++ }  END  { print nlines }'
}

function newbash() # XDOTOOL CREATES NEW BASH TAB
{
	xdotool key ctrl+shift+t
	xdotool keyup ctrl+shift+t
	xdotool type bash
	xdotool keydown Return
	xdotool keyup Return
	xdotool type clear
	xdotool key Return
	xdotool keyup Return
}

function cpbashup() # CREATE CPIOGZ OF BASH COMMANDS
{
	local TIME=`date +%d%b`
	find /home/rob/ -name "*.bash*" | cpio -o > $HOME/Backup/Cpio/bashup$TIME.cpio ; gzip $HOME/Backup/Cpioarchive/bashup$TIME.cpio
}

function cpfind() # DESCRIBES HOW TO USE FIND WITH CPIO
{
	echo 'Usage is like this: find LOCATION -(i)name "*.extension" | cpio -o > ARCHIVE.cpio [put iname for case insensitive searches]'
	#find /home/shambi07/ -iname $1 | cpio -o > $2.cpio
}

function cpiomd() # MAKE CURRENT DIRECTORY INTO A CPIO ARCHIVE
{
	find . -depth -print0 | cpio --null -pvd $1
}

function cpiodir() # USE LS TO CREATE A CPIO ARCHIVE
{
	ls | cpio -ov > $1.cpio
}

function cpview() # VIEW A CPIO ARCHIVES CONTENTS
{
	cpio -it < $1.cpio
}

function excpio() # EXTRACT A CPIO ARCHIVE AND CONTENTS GO TO ORIGINAL DIRECTORY
{
	cpio -iv < $1.cpio
}

function excpwd() # EXTRACT CPIO TO WD
{
	cpio -idv --no-absolute-filenames < $1.cpio
}

function psumof() # PERLS SUM OF ALL NUMBERS IN A FILE
{
	perl -nle '$sum += $_ } END { print $sum' $1
}

function sumof() # SUM USING AWK
{
	awk '{sum+=$0} END {print sum}' $1
}

# COLORS FOR USE IN FUNCTIONS

Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# BOLD
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# BACKGROUND
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

ALERT=${BWhite}${On_Red} # Bold White on red background

NC="\e[m"               # Color Reset

# function superdf()
# {
#     for fs ; do
#         if [ ! -d $fs ]
#         then
#           echo -e $fs" :No such file or directory" ; continue
#         fi
#         local info=( $(command \df -P $fs | awk 'END{ print $2,$3,$5 }') )
#         local total=( $(command \df -Pk $fs | awk 'END {print $2}' ) )
# 				local free=( $(command \df -Pk $fs | awk 'END {print $4}' ) )
#         local nbstars=$(( 10 * ${info[1]} / ${info[0]} ))
#         local out="["
#         for ((j=0;j<10;j++)); do
#             if [ ${j} -lt ${nbstars} ]; then
#                out=$out"*"
#             else
#                out=$out"-"
#             fi
#         done
# #				fs=$(echo $(echo $fs | tr a-z A-Z) Drive)
# 				free=$(printf "%'d\n" ${free[0]})
# 				total=$(printf "%'d\n" ${total[0]})
#         out=${info[2]}" "$out"] ("$free"/"$total ")"
#         echo -e $out
#     done
# }
